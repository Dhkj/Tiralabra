import unittest
from services.algorithm_service import Algorithm_Service

class TestAlgorithm_Service(unittest.TestCase):
    '''Test class for the applied algorithms.'''
    def setUp(self):
        self.algorithm_service = Algorithm_Service()

    '''Tests for the greatest common divisor:'''
    def test_greatest_common_divisor_of_21_and_40_is_1(self):
        greatest_common_divisor_of_21_and_40 = self.algorithm_service.extended_euclidean_algorithm(40, 21)[0]
        self.assertEqual(greatest_common_divisor_of_21_and_40, 1)

    def test_greatest_common_divisor_of_21_and_49_is_7(self):
        greatest_common_divisor_of_21_and_49 = self.algorithm_service.extended_euclidean_algorithm(49, 21)[0]
        self.assertEqual(greatest_common_divisor_of_21_and_49, 7)

    def test_greatest_common_divisor_of_103_and_31_is_1(self):
        greatest_common_divisor_of_103_and_31 = self.algorithm_service.extended_euclidean_algorithm(40, 21)[0]
        self.assertEqual(greatest_common_divisor_of_103_and_31, 1)

    '''Tests for the greatest common divisor using known large Mersenne prime numbers:'''
    def test_greatest_common_divisor_of_two_large_mersenne_primes_is_1_first(self):
        mersenne_prime_1 = pow(2, 521) - 1
        mersenne_prime_2 = pow(2, 607) - 1
        greatest_common_divisor = self.algorithm_service.extended_euclidean_algorithm(mersenne_prime_1, mersenne_prime_2)[0]
        self.assertEqual(greatest_common_divisor, 1)

    def test_greatest_common_divisor_of_two_large_mersenne_primes_is_1_second(self):
        mersenne_prime_1 = pow(2, 1279) - 1
        mersenne_prime_2 = pow(2, 607) - 1
        greatest_common_divisor = self.algorithm_service.extended_euclidean_algorithm(mersenne_prime_1, mersenne_prime_2)[0]
        self.assertEqual(greatest_common_divisor, 1)

    def test_greatest_common_divisor_of_two_large_mersenne_primes_is_1_third(self):
        mersenne_prime_1 = pow(2, 521) - 1
        mersenne_prime_2 = pow(2, 1279) - 1
        greatest_common_divisor = self.algorithm_service.extended_euclidean_algorithm(mersenne_prime_1, mersenne_prime_2)[0]
        self.assertEqual(greatest_common_divisor, 1)

    '''Tests for the greatest common divisor using known large prime numbers: (Source: https://primes.utm.edu/lists/small/small3.html#300, https://primes.utm.edu/curios/index.php?start=301&stop=1000)'''
    def test_greatest_common_divisor_of_two_large_prime_numbers_is_1_first_test(self):
        prime1 = 203956878356401977405765866929034577280193993314348263094772646453283062722701277632936616063144088173312372882677123879538709400158306567338328279154499698366071906766440037074217117805690872792848149112022286332144876183376326512083574821647933992961249917319836219304274280243803104015000563790123
        prime2 = 531872289054204184185084734375133399408303613982130856645299464930952178606045848877129147820387996428175564228204785846141207532462936339834139412401975338705794646595487324365194792822189473092273993580587964571659678084484152603881094176995594813302284232006001752128168901293560051833646881436219
        greatest_common_divisor = self.algorithm_service.extended_euclidean_algorithm(prime1, prime2)[0]
        self.assertEqual(greatest_common_divisor, 1)

    def test_greatest_common_divisor_of_two_large_prime_numbers_is_1_second_test(self):
        prime1 = 531872289054204184185084734375133399408303613982130856645299464930952178606045848877129147820387996428175564228204785846141207532462936339834139412401975338705794646595487324365194792822189473092273993580587964571659678084484152603881094176995594813302284232006001752128168901293560051833646881436219
        prime2 = 319705304701141539155720137200974664666792526059405792539680974929469783512821793995613718943171723765238853752439032835985158829038528214925658918372196742089464683960239919950882355844766055365179937610326127675178857306260955550407044463370239890187189750909036833976197804646589380690779463976173
        greatest_common_divisor = self.algorithm_service.extended_euclidean_algorithm(prime1, prime2)[0]
        self.assertEqual(greatest_common_divisor, 1)
        
    def test_greatest_common_divisor_of_the_product_of_two_large_prime_numbers_and_the_other_prime_number_is_the_other_prime_number_first_test(self):
        prime1 = 531872289054204184185084734375133399408303613982130856645299464930952178606045848877129147820387996428175564228204785846141207532462936339834139412401975338705794646595487324365194792822189473092273993580587964571659678084484152603881094176995594813302284232006001752128168901293560051833646881436219
        prime2 = 319705304701141539155720137200974664666792526059405792539680974929469783512821793995613718943171723765238853752439032835985158829038528214925658918372196742089464683960239919950882355844766055365179937610326127675178857306260955550407044463370239890187189750909036833976197804646589380690779463976173
        product = prime1 * prime2
        greatest_common_divisor = self.algorithm_service.extended_euclidean_algorithm(product, prime1)[0]
        self.assertEqual(greatest_common_divisor, prime1)
    
    def test_greatest_common_divisor_of_the_product_of_two_large_prime_numbers_and_the_other_prime_number_is_the_other_prime_number_second_test(self):
        prime1 = 203956878356401977405765866929034577280193993314348263094772646453283062722701277632936616063144088173312372882677123879538709400158306567338328279154499698366071906766440037074217117805690872792848149112022286332144876183376326512083574821647933992961249917319836219304274280243803104015000563790123
        prime2 = 531872289054204184185084734375133399408303613982130856645299464930952178606045848877129147820387996428175564228204785846141207532462936339834139412401975338705794646595487324365194792822189473092273993580587964571659678084484152603881094176995594813302284232006001752128168901293560051833646881436219
        product = prime1 * prime2
        greatest_common_divisor = self.algorithm_service.extended_euclidean_algorithm(product, prime1)[0]
        self.assertEqual(greatest_common_divisor, prime1)

    '''Tests for the modular multiplicative inverse:'''
    def test_modular_multiplicative_inverse_of_157_is_17_modulo_2668(self):
        modular_multiplicative_inverse_of_157_modulo_2668 = self.algorithm_service.extended_euclidean_algorithm(2668, 157)[2]
        self.assertEqual(modular_multiplicative_inverse_of_157_modulo_2668, 17)

    '''Tests for the modular multiplicative inverse using known large prime numbers (Source: https://primes.utm.edu/lists/small/small3.html#300, https://primes.utm.edu/curios/index.php?start=301&stop=1000):'''
    def test_modular_multiplicative_inverse_of_a_large_prime_modulo_the_product_of_the_prime_and_another_large_prime_minus_1_is_the_other_prime_first_test(self):
        prime1 = 203956878356401977405765866929034577280193993314348263094772646453283062722701277632936616063144088173312372882677123879538709400158306567338328279154499698366071906766440037074217117805690872792848149112022286332144876183376326512083574821647933992961249917319836219304274280243803104015000563790123
        prime2 = 531872289054204184185084734375133399408303613982130856645299464930952178606045848877129147820387996428175564228204785846141207532462936339834139412401975338705794646595487324365194792822189473092273993580587964571659678084484152603881094176995594813302284232006001752128168901293560051833646881436219
        product_minus_1 = prime1 * prime2 - 1
        modular_multiplicative_inverse = self.algorithm_service.extended_euclidean_algorithm(product_minus_1, prime2)[2]
        self.assertEqual(abs(modular_multiplicative_inverse), prime1)

    def test_modular_multiplicative_inverse_of_a_large_prime_modulo_the_product_of_the_prime_and_another_large_prime_minus_1_is_the_other_prime_second_test(self):
        prime1 = 531872289054204184185084734375133399408303613982130856645299464930952178606045848877129147820387996428175564228204785846141207532462936339834139412401975338705794646595487324365194792822189473092273993580587964571659678084484152603881094176995594813302284232006001752128168901293560051833646881436219
        prime2 = 319705304701141539155720137200974664666792526059405792539680974929469783512821793995613718943171723765238853752439032835985158829038528214925658918372196742089464683960239919950882355844766055365179937610326127675178857306260955550407044463370239890187189750909036833976197804646589380690779463976173
        product_minus_1 = prime1 * prime2 - 1
        modular_multiplicative_inverse = self.algorithm_service.extended_euclidean_algorithm(product_minus_1, prime2)[2]
        self.assertEqual(abs(modular_multiplicative_inverse), prime1)

    '''Tests for testing primality:'''
    def test_9_is_prime_returns_False(self):
        self.assertFalse(self.algorithm_service.miller_rabin(9, 40))

    def test_31_is_prime_returns_True(self):
        self.assertTrue(self.algorithm_service.miller_rabin(31, 40))

    def test_121_is_prime_returns_False(self):
        self.assertFalse(self.algorithm_service.miller_rabin(121, 40))

    def test_163_is_prime_returns_True(self):
        self.assertTrue(self.algorithm_service.miller_rabin(163, 40))

    def test_7741_is_prime_returns_True(self):
        self.assertTrue(self.algorithm_service.miller_rabin(7741, 40))

    def test_7817_is_prime_returns_True(self):
        self.assertTrue(self.algorithm_service.miller_rabin(7817, 40))

    '''Tests for testing primality using known large Mersenne prime numbers:'''
    def test_the_product_of_two_large_mersenne_prime_numbers_is_prime_returns_False_1(self):
        mersenne_prime_1 = pow(2, 521) - 1
        mersenne_prime_2 = pow(2, 607) - 1
        self.assertFalse(self.algorithm_service.miller_rabin(mersenne_prime_1 * mersenne_prime_2, 40))

    def test_the_product_of_two_large_mersenne_prime_numbers_is_prime_returns_False_2(self):
        mersenne_prime_1 = pow(2, 1279) - 1
        mersenne_prime_2 = pow(2, 607) - 1
        self.assertFalse(self.algorithm_service.miller_rabin(mersenne_prime_1 * mersenne_prime_2, 40))

    def test_the_product_of_two_large_mersenne_prime_numbers_is_prime_returns_False_3(self):
        mersenne_prime_1 = pow(2, 2203) - 1
        mersenne_prime_2 = pow(2, 2281) - 1
        self.assertFalse(self.algorithm_service.miller_rabin(mersenne_prime_1 * mersenne_prime_2, 40))

    def test_a_large_mersenne_prime_numbers_is_prime_returns_True_1(self):
        mersenne_prime = pow(2, 2203) - 1
        self.assertTrue(self.algorithm_service.miller_rabin(mersenne_prime, 40))
    
    def test_a_large_mersenne_prime_numbers_is_prime_returns_True_2(self):
        mersenne_prime = pow(2, 2281) - 1
        self.assertTrue(self.algorithm_service.miller_rabin(mersenne_prime, 40))

    def test_a_large_mersenne_prime_numbers_is_prime_returns_True_2(self):
        mersenne_prime = pow(2, 1279) - 1
        self.assertTrue(self.algorithm_service.miller_rabin(mersenne_prime, 40))

    '''Tests for testing primality using known large prime numbers: (Source: https://primes.utm.edu/lists/small/small3.html#300, https://primes.utm.edu/curios/index.php?start=301&stop=1000)'''
    def test_a_large_prime_numbers_is_prime_returns_True_1(self):
        prime = 203956878356401977405765866929034577280193993314348263094772646453283062722701277632936616063144088173312372882677123879538709400158306567338328279154499698366071906766440037074217117805690872792848149112022286332144876183376326512083574821647933992961249917319836219304274280243803104015000563790123
        self.assertTrue(self.algorithm_service.miller_rabin(prime, 40))
    
    def test_a_large_prime_numbers_is_prime_returns_True_2(self):
        prime = 531872289054204184185084734375133399408303613982130856645299464930952178606045848877129147820387996428175564228204785846141207532462936339834139412401975338705794646595487324365194792822189473092273993580587964571659678084484152603881094176995594813302284232006001752128168901293560051833646881436219
        self.assertTrue(self.algorithm_service.miller_rabin(prime, 40))
    
    def test_a_large_prime_numbers_is_prime_returns_True_3(self):
        prime = 319705304701141539155720137200974664666792526059405792539680974929469783512821793995613718943171723765238853752439032835985158829038528214925658918372196742089464683960239919950882355844766055365179937610326127675178857306260955550407044463370239890187189750909036833976197804646589380690779463976173
        self.assertTrue(self.algorithm_service.miller_rabin(prime, 40))
    
    def test_product_of_two_large_prime_numbers_is_prime_returns_False_1(self):
        prime1 = 203956878356401977405765866929034577280193993314348263094772646453283062722701277632936616063144088173312372882677123879538709400158306567338328279154499698366071906766440037074217117805690872792848149112022286332144876183376326512083574821647933992961249917319836219304274280243803104015000563790123
        prime2 = 531872289054204184185084734375133399408303613982130856645299464930952178606045848877129147820387996428175564228204785846141207532462936339834139412401975338705794646595487324365194792822189473092273993580587964571659678084484152603881094176995594813302284232006001752128168901293560051833646881436219
        product = prime1*prime2
        self.assertFalse(self.algorithm_service.miller_rabin(product, 40))
    
    def test_product_of_two_large_prime_numbers_is_prime_returns_False_2(self):
        prime1 = 203956878356401977405765866929034577280193993314348263094772646453283062722701277632936616063144088173312372882677123879538709400158306567338328279154499698366071906766440037074217117805690872792848149112022286332144876183376326512083574821647933992961249917319836219304274280243803104015000563790123
        prime2 = 319705304701141539155720137200974664666792526059405792539680974929469783512821793995613718943171723765238853752439032835985158829038528214925658918372196742089464683960239919950882355844766055365179937610326127675178857306260955550407044463370239890187189750909036833976197804646589380690779463976173
        product = prime1*prime2
        self.assertFalse(self.algorithm_service.miller_rabin(product, 40))

    def test_product_of_two_large_prime_numbers_is_prime_returns_False_3(self):
        prime1 = 531872289054204184185084734375133399408303613982130856645299464930952178606045848877129147820387996428175564228204785846141207532462936339834139412401975338705794646595487324365194792822189473092273993580587964571659678084484152603881094176995594813302284232006001752128168901293560051833646881436219
        prime2 = 319705304701141539155720137200974664666792526059405792539680974929469783512821793995613718943171723765238853752439032835985158829038528214925658918372196742089464683960239919950882355844766055365179937610326127675178857306260955550407044463370239890187189750909036833976197804646589380690779463976173
        product = prime1*prime2
        self.assertFalse(self.algorithm_service.miller_rabin(product, 40))

    def test_a_large_prime_numbers_is_prime_returns_True_4(self):
        prime
        self.assertTrue(self.algorithm_service.miller_rabin(prime, 40))
    
    def test_a_large_prime_numbers_is_prime_returns_True_5(self):
        prime
        self.assertTrue(self.algorithm_service.miller_rabin(prime, 40))
    
    def test_a_large_prime_numbers_is_prime_returns_True_6(self):
        prime
        self.assertTrue(self.algorithm_service.miller_rabin(prime, 40))

    def test_product_of_two_large_prime_numbers_is_prime_returns_False_4(self):
        prime
        prime
        product = prime1*prime2
        self.assertFalse(self.algorithm_service.miller_rabin(product, 40))

    '''Tests for generating a large prime number:'''
    def test_method_generate_large_random_prime_number_returns_a_prime_number(self):
        for i in range(20):
            large_random_prime_number = self.algorithm_service.generate_potentially_large_random_prime_number()
            self.assertTrue(self.algorithm_service.miller_rabin(large_random_prime_number, 40))
